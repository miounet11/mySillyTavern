generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  username         String
  email            String?           @unique
  settings         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  aiModels         AIModelConfig[]
  characters       Character[]
  contextTemplates ContextTemplate[]
  promptTemplates  PromptTemplate[]

  @@index([email])
  @@index([createdAt])
}

model Chat {
  id          String       @id @default(cuid())
  title       String
  characterId String
  userId      String?      @default("default")
  settings    String?
  isFavorite  Boolean      @default(false)
  isArchived  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  character   Character    @relation(fields: [characterId], references: [id], onDelete: Cascade)
  branches    ChatBranch[]
  messages    Message[]

  @@index([characterId])
  @@index([userId])
  @@index([updatedAt])
  @@index([isFavorite])
  @@index([isArchived])
}

model Message {
  id        String                @id @default(cuid())
  chatId    String
  role      String
  content   String
  metadata  String?
  timestamp DateTime              @default(now())
  branchId  String?
  embedding ChatMessageEmbedding?
  branch    ChatBranch?           @relation(fields: [branchId], references: [id])
  chat      Chat                  @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([chatId, timestamp])
  @@index([branchId])
}

model ChatBranch {
  id          String       @id @default(cuid())
  parentId    String?
  chatId      String
  branchPoint String
  title       String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  chat        Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  parent      ChatBranch?  @relation("BranchHierarchy", fields: [parentId], references: [id])
  children    ChatBranch[] @relation("BranchHierarchy")
  messages    Message[]

  @@index([chatId])
  @@index([parentId])
  @@index([isActive])
}

model Character {
  id                      String               @id @default(cuid())
  name                    String
  description             String?
  personality             String?
  scenario                String?
  firstMessage            String?
  mesExample              String?
  avatar                  String?
  background              String?
  exampleMessages         String?
  tags                    String?
  creatorNotes            String?
  systemPrompt            String?
  postHistoryInstructions String?
  alternateGreetings      String?
  characterBook           String?
  creator                 String?
  characterVersion        String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  settings                String?
  userId                  String?
  authorNote              String?
  authorNoteDepth         Int?                 @default(0)
  jailbreakPrompt         String?
  stopStrings             String?
  forcePrefix             Boolean?             @default(true)
  exampleSeparator        String?              @default("###") @db.VarChar(50)
  chatStart               String?              @default("<START>") @db.VarChar(50)
  contextTemplateId       String?
  user                    User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats                   Chat[]
  pluginSettings          PluginSetting[]
  worldInfos              WorldInfoCharacter[]

  @@index([userId])
  @@index([name])
  @@index([createdAt])
}

model WorldInfo {
  id                String                 @id @default(cuid())
  name              String
  content           String
  keywords          String?
  activationType    String
  priority          Int                    @default(100)
  depth             Int                    @default(4)
  enabled           Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  settings          String?
  secondaryKeys     String?
  keywordsRegex     String?
  useRegex          Boolean?               @default(false)
  selectiveLogic    String?                @default("AND_ANY") @db.VarChar(20)
  recursive         Boolean?               @default(false)
  recursiveLevel    Int?                   @default(1)
  maxRecursionSteps Int?                   @default(2)
  minActivations    Int?                   @default(0)
  cascadeTrigger    String?
  sticky            Int?                   @default(0)
  cooldown          Int?                   @default(0)
  delay             Int?                   @default(0)
  position          String?                @default("after_char") @db.VarChar(50)
  insertionOrder    Int?                   @default(100)
  tokenBudget       Int?                   @default(500)
  insertionTemplate String?
  embeddingVector   Unsupported("vector")?
  activations       WorldInfoActivation[]
  characters        WorldInfoCharacter[]
  vectors           WorldInfoVector[]

  @@index([activationType])
  @@index([enabled])
  @@index([priority])
  @@index([embeddingVector], map: "worldinfo_embedding_idx")
}

model WorldInfoCharacter {
  worldInfoId String
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  worldInfo   WorldInfo @relation(fields: [worldInfoId], references: [id], onDelete: Cascade)

  @@id([worldInfoId, characterId])
}

model WorldInfoVector {
  id          String    @id @default(cuid())
  worldInfoId String
  embedding   String
  text        String
  createdAt   DateTime  @default(now())
  worldInfo   WorldInfo @relation(fields: [worldInfoId], references: [id], onDelete: Cascade)

  @@index([worldInfoId])
}

model AIModelConfig {
  id           String   @id @default(cuid())
  name         String
  provider     String
  model        String
  apiKey       String?
  baseUrl      String?
  settings     String?
  isActive     Boolean  @default(true)
  capabilities String?  @db.Text // JSON: ModelCapabilities
  metadata     String?  @db.Text // JSON: ModelMetadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([name])
  @@index([provider])
  @@index([isActive])
}

model Plugin {
  id          String          @id @default(cuid())
  name        String          @unique
  version     String
  description String?
  author      String?
  homepage    String?
  repository  String?
  license     String?
  keywords    String?
  enabled     Boolean         @default(false)
  config      String?
  manifest    String
  installedAt DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  settings    PluginSetting[]

  @@index([enabled])
  @@index([name])
}

model PluginSetting {
  id        String     @id @default(cuid())
  pluginId  String
  scopeType String
  scopeId   String?
  config    String
  enabled   Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  plugin    Plugin     @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  character Character? @relation(fields: [scopeId], references: [id], onDelete: Cascade)

  @@index([pluginId])
  @@index([scopeType, scopeId])
  @@index([enabled])
}

model UserSetting {
  id         String   @id @default("default")
  theme      String   @default("dark")
  language   String   @default("en")
  uiSettings String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([id])
}

model SystemLog {
  id        String   @id @default(cuid())
  level     String
  message   String
  metadata  String?
  timestamp DateTime @default(now())

  @@index([timestamp])
  @@index([level])
}

model FileStorage {
  id           String   @id @default(cuid())
  originalName String
  filename     String   @unique
  mimeType     String
  size         Int
  path         String
  hash         String?
  uploadedBy   String?  @default("default")
  createdAt    DateTime @default(now())

  @@index([filename])
  @@index([mimeType])
  @@index([uploadedBy])
  @@index([hash])
}

model PromptTemplate {
  id          String   @id @default(cuid())
  name        String
  content     String
  category    String
  description String?
  isBuiltin   Boolean  @default(false)
  userId      String?
  isFavorite  Boolean  @default(false)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([userId])
  @@index([isBuiltin])
  @@index([isFavorite])
}

model CommunityCharacter {
  id            String   @id @default(cuid())
  name          String
  description   String?
  characterData String
  avatar        String?
  author        String
  authorId      String?  @default("default")
  downloads     Int      @default(0)
  likes         Int      @default(0)
  tags          String?
  category      String   @default("cards")
  isPublished   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([name])
  @@index([category])
  @@index([isPublished])
  @@index([author])
  @@index([downloads])
}

model WorldInfoActivation {
  id            String    @id @default(cuid())
  worldInfoId   String
  chatId        String
  activatedAt   DateTime  @default(now()) @db.Timestamp(6)
  expiresAt     DateTime? @db.Timestamp(6)
  cooldownUntil DateTime? @db.Timestamp(6)
  messageCount  Int?      @default(0)
  worldInfo     WorldInfo @relation(fields: [worldInfoId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([chatId, worldInfoId], map: "activation_chat_wi_idx")
  @@index([cooldownUntil], map: "activation_cooldown_idx")
  @@index([expiresAt], map: "activation_expires_idx")
}

model ChatMessageEmbedding {
  id        String                 @id @default(cuid())
  messageId String                 @unique
  chatId    String
  embedding Unsupported("vector")?
  summary   String?
  createdAt DateTime?              @default(now()) @db.Timestamp(6)
  message   Message                @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([chatId], map: "message_embedding_chat_idx")
  @@index([embedding], map: "message_embedding_idx")
}

model ChatSummary {
  id          String    @id @default(cuid())
  chatId      String
  fromMessage Int
  toMessage   Int
  summary     String
  createdAt   DateTime? @default(now()) @db.Timestamp(6)

  @@index([chatId], map: "summary_chat_idx")
}

model ContextTemplate {
  id        String    @id @default(cuid())
  name      String
  template  String
  isDefault Boolean?  @default(false)
  userId    String?
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([isDefault], map: "template_default_idx")
  @@index([userId], map: "template_user_idx")
}
