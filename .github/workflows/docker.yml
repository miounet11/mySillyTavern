name: 🐳 Docker Workflow

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每周日凌晨2点检查基础镜像更新
    - cron: '0 2 * * 0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 Dockerfile 语法检查
  dockerfile-lint:
    name: 🔍 Dockerfile Lint
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Hadolint - Dockerfile Linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008,DL3009,SC2086

  # 🏗️ 构建Docker镜像
  build:
    name: 🐳 Build Image
    runs-on: ubuntu-latest
    needs: dockerfile-lint
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: 🐳 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🔍 镜像安全扫描
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # 🧪 镜像测试
  test-image:
    name: 🧪 Test Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Start test container
        run: |
          docker run -d \
            --name sillytavern-test \
            -p 3000:3000 \
            -e DATABASE_URL=file:./test.db \
            -e NODE_ENV=test \
            ${{ needs.build.outputs.image-tag }}

      - name: ⏳ Wait for container to start
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'

      - name: 🔍 Health check
        run: |
          curl -f http://localhost:3000/api/health

      - name: 🧪 Run API tests
        run: |
          curl -X POST http://localhost:3000/api/characters \
            -H "Content-Type: application/json" \
            -d '{"name":"Test Character","description":"Test","firstMessage":"Hello"}'

      - name: 🧹 Cleanup
        if: always()
        run: |
          docker stop sillytavern-test
          docker rm sillytavern-test

  # 📊 镜像信息
  image-info:
    name: 📊 Image Information
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Show image information
        run: |
          echo "📊 Docker Image Information"
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Image: ${{ env.IMAGE_NAME }}"
          echo "Tag: ${{ needs.build.outputs.image-tag }}"
          echo "Digest: ${{ needs.build.outputs.image-digest }}"

          # 显示镜像大小
          docker pull ${{ needs.build.outputs.image-tag }}
          docker images ${{ needs.build.outputs.image-tag }}

      - name: 📋 Generate image report
        if: always()
        run: |
          echo "# 🐳 Docker Image Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: ${{ needs.build.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY

  # 🚀 自动部署 (仅在主分支)
  auto-deploy:
    name: 🚀 Auto Deploy
    runs-on: ubuntu-latest
    needs: [build, test-image, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Auto-deploying to production..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"

          # 这里可以添加自动部署逻辑
          # 例如：更新Kubernetes部署、调用部署API等

      - name: 📧 Deployment notification
        if: always()
        run: |
          echo "Deployment completed with status: ${{ job.status }}"