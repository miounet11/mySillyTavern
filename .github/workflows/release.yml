name: 🚀 Release Workflow

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🏷️ 创建发布
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest

    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🏷️ Release version: $VERSION"

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # 获取上一个标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🏷️ Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: 🎭 SillyTavern Perfect Clone v${{ steps.version.outputs.version }}
          body: |
            ## 🎉 SillyTavern Perfect Clone v${{ steps.version.outputs.version }}

            ### ✨ New Features
            - Complete AI chat interface with real-time messaging
            - Character management system with rich profiles
            - AI model integration (OpenAI, Anthropic, Google AI)
            - World Info system for context management
            - Modern Next.js 14 + TypeScript architecture
            - Docker containerization with one-click deployment

            ### 🛠️ Technical Improvements
            - Modern tech stack: Next.js 14, React 18, TypeScript 5
            - Responsive design with dark theme
            - Database schema with Prisma ORM
            - RESTful API with Zod validation
            - Professional UI/UX components

            ### 🐳 Docker & Deployment
            - Multi-stage Docker build optimization
            - Docker Compose configuration
            - Automated deployment scripts
            - Health checks and monitoring

            ### 📚 Documentation
            - Complete deployment guide
            - API documentation
            - Usage examples and tutorials

            ### 🐛 Bug Fixes
            - Fixed responsive layout issues
            - Improved error handling
            - Enhanced performance optimization

            ### 📋 Installation
            ```bash
            git clone https://github.com/miounet11/mySillyTavern.git
            cd mySillyTavern
            chmod +x scripts/deploy.sh
            ./scripts/deploy.sh deploy
            ```

            ### 📋 What's Changed
            ${{ steps.changelog.outputs.changelog }}

            **Full Changelog**: https://github.com/miounet11/mySillyTavern/compare/v${{ steps.version.outputs.version-1 }}...v${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || 'false' }}

  # 🐳 构建和发布Docker镜像
  build-and-publish-docker:
    name: 🐳 Build & Publish Docker
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📋 Generate Docker image info
        run: |
          echo "# 🐳 Docker Images Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Published Images" >> $GITHUB_STEP_SUMMARY
          for tag in ${{ steps.meta.outputs.tags }}; do
            echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
          done

  # 📦 构建和发布NPM包
  build-and-publish-npm:
    name: 📦 Build & Publish NPM
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build packages
        run: npm run build

      - name: 🧪 Run tests
        run: npm test --if-present

      - name: 📦 Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # 📊 发布状态通知
  release-notification:
    name: 📧 Release Notification
    runs-on: ubuntu-latest
    needs: [create-release, build-and-publish-docker, build-and-publish-npm]
    if: always()

    steps:
      - name: 📧 Send release notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#releases'
          text: |
            🎉 Release ${{ needs.create-release.result }}
            Repository: ${{ github.repository }}
            Version: ${{ github.ref_name }}
            Docker: ${{ needs.build-and-publish-docker.result }}
            NPM: ${{ needs.build-and-publish-npm.result }}

      - name: 🐦 Tweet release
        uses: ethomson/twitter-action@v1
        with:
          api-key: ${{ secrets.TWITTER_API_KEY }}
          api-secret-key: ${{ secrets.TWITTER_API_SECRET_KEY }}
          access-token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          tweet: |
            🎭 SillyTavern Perfect Clone v${{ github.ref_name }} is now available!

            ✨ Features: AI chat, character management, world info system
            🛠️ Tech: Next.js 14, TypeScript, Docker
            🐳 One-click deployment ready

            🚀 Get started now: https://github.com/miounet11/mySillyTavern

            #SillyTavern #AI #Chatbot #OpenSource

  # 📋 发布后检查
  post-release-checks:
    name: 🔍 Post-Release Checks
    runs-on: ubuntu-latest
    needs: [create-release, build-and-publish-docker]

    steps:
      - name: 🔍 Verify Docker image
        run: |
          echo "🔍 Verifying Docker image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest echo "✅ Docker image works!"

      - name: 🔍 Verify GitHub release
        run: |
          echo "🔍 Verifying GitHub release..."
          curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} || echo "❌ Release verification failed"

      - name: 📊 Generate release report
        run: |
          echo "# 🚀 Release Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Build**: ${{ needs.build-and-publish-docker.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Publish**: ${{ needs.build-and-publish-npm.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Created**: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY

  # 🧹 清理旧版本
  cleanup-old-versions:
    name: 🧹 Cleanup Old Versions
    runs-on: ubuntu-latest
    needs: [create-release]
    if: success() && github.event_name == 'push'

    steps:
      - name: 🧹 Clean up old Docker images
        run: |
          echo "🧹 Cleaning up old Docker images..."
          # 这里可以添加清理逻辑，比如删除旧版本的镜像

      - name: 🧹 Clean up old releases
        run: |
          echo "🧹 Keeping only last 5 releases..."
          # 使用GitHub API删除旧的releases，只保留最新的5个